# ~/akoben-clean/src/agents/vision/vision_analyzer.pyimport cv2import osimport numpy as npimport mathfrom scipy.signal import find_peaks# Définir les chemins de baseAKOBEN_CLEAN_DIR = "/home/lasko/akoben-clean"AKOBEN_RUNTIME_DIR = "/home/lasko/akoben"# --- Fonctions précédentes (analyze_rsi_zone..., extract_rsi..., find_rsi_extrema..., analyze_price_zone..., extract_zigzag...) ---# ... (supposées définies et inchangées) ...def analyze_rsi_zone_fixed_percent(relative_image_path_in_runtime: str, start_percent: float = 0.59, end_percent: float = 0.71):    # ... (code identique) ...    image_path = os.path.join(AKOBEN_RUNTIME_DIR, "tradingview_captures", relative_image_path_in_runtime)    img_color = cv2.imread(image_path, cv2.IMREAD_COLOR)    if img_color is None: return None, None    height, width, _ = img_color.shape    rsi_y_top = int(height * start_percent); rsi_y_bottom = int(height * end_percent)    rsi_roi = img_color[rsi_y_top:rsi_y_bottom, :]    # ... (sauvegarde) ...    return rsi_roi, (rsi_y_top, rsi_y_bottom)def extract_rsi_curve_by_color(rsi_roi_image: np.ndarray):    # ... (code identique) ...    if rsi_roi_image is None: return None    hsv_roi = cv2.cvtColor(rsi_roi_image, cv2.COLOR_BGR2HSV)    lower_purple = np.array([125, 100, 149]); upper_purple = np.array([135, 200, 254])    mask = cv2.inRange(hsv_roi, lower_purple, upper_purple)    mask_closed = cv2.morphologyEx(mask, cv2.MORPH_CLOSE, np.ones((3,3), np.uint8), iterations=1)    # ... (sauvegarde) ...    return mask_closeddef find_rsi_extrema(rsi_mask: np.ndarray, prominence_threshold: float = 3.0, distance_threshold: int = 15):    # ... (code identique) ...    h, w = rsi_mask.shape; rsi_curve_y = []; rsi_curve_x = []    for x in range(w):        y_coords = np.where(rsi_mask[:, x] == 255)[0]        if len(y_coords) > 0: y_avg = int(np.mean(y_coords)); rsi_curve_y.append(y_avg); rsi_curve_x.append(x)    if not rsi_curve_y: return [],[]    signal_y = np.array(rsi_curve_y)    peaks_indices, _ = find_peaks(-signal_y, prominence=prominence_threshold, distance=distance_threshold)    peaks_coords = [(rsi_curve_x[i], rsi_curve_y[i]) for i in peaks_indices]    troughs_indices, _ = find_peaks(signal_y, prominence=prominence_threshold, distance=distance_threshold)    troughs_coords = [(rsi_curve_x[i], rsi_curve_y[i]) for i in troughs_indices]    return peaks_coords, troughs_coordsdef analyze_price_zone_fixed_percent(relative_image_path_in_runtime: str, start_percent: float = 0.06, end_percent: float = 0.59):     # ... (code identique) ...    image_path = os.path.join(AKOBEN_RUNTIME_DIR, "tradingview_captures", relative_image_path_in_runtime)    img_color = cv2.imread(image_path, cv2.IMREAD_COLOR)    if img_color is None: return None, None    height, width, _ = img_color.shape    price_y_top = int(height * start_percent); price_y_bottom = int(height * end_percent)    price_roi = img_color[price_y_top:price_y_bottom, :]    # ... (sauvegarde) ...    return price_roi, (price_y_top, price_y_bottom)def extract_zigzag_by_color(price_roi_image: np.ndarray):    # ... (code identique) ...    if price_roi_image is None: return None    hsv_roi = cv2.cvtColor(price_roi_image, cv2.COLOR_BGR2HSV)    lower_blue = np.array([100, 150, 100]); upper_blue = np.array([120, 255, 255])    mask = cv2.inRange(hsv_roi, lower_blue, upper_blue)    mask_closed = cv2.morphologyEx(mask, cv2.MORPH_CLOSE, np.ones((3,3), np.uint8), iterations=1)    # ... (sauvegarde) ...    return mask_closed# --- find_zigzag_vertices (RENOMMÉE ET MODIFIÉE pour Shi-Tomasi) ---def find_zigzag_corners_shi_tomasi(price_roi_image: np.ndarray, zigzag_mask: np.ndarray,                                    max_corners: int = 50, quality_level: float = 0.01, min_distance: int = 10):    """    Trouve les coins proéminents (probablement les sommets du ZigZag) en utilisant    le détecteur de coins Shi-Tomasi (goodFeaturesToTrack), potentiellement masqué    par le masque du ZigZag.    Args:        price_roi_image (np.ndarray): ROI de l'image couleur contenant la zone de prix.        zigzag_mask (np.ndarray): Masque binaire de la ligne ZigZag (pour cibler la recherche).        max_corners (int): Nombre maximum de coins à retourner.        quality_level (float): Seuil de qualité (0.01-1.0). Inférieur = plus de coins.        min_distance (int): Distance minimale entre les coins détectés.    Returns:        List[Tuple[int, int]]: Liste des coordonnées (x, y) des coins détectés.    """    if price_roi_image is None or price_roi_image.ndim != 3:        print("ERREUR: ROI Prix invalide pour la détection de coins.")        return []    if zigzag_mask is not None and (zigzag_mask.ndim != 2 or zigzag_mask.shape[:2] != price_roi_image.shape[:2]):         print("ERREUR: Masque ZigZag invalide ou de taille différente du ROI Prix.")         # Optionnel: continuer sans masque si invalide? Pour l'instant, on arrête.         return []    print("Détection des coins (Shi-Tomasi) sur la zone ZigZag...")    # 1. Convertir le ROI Prix en niveaux de gris    gray_roi = cv2.cvtColor(price_roi_image, cv2.COLOR_BGR2GRAY)    # 2. Appliquer goodFeaturesToTrack    # Utilisation du masque zigzag_mask pour restreindre la recherche    corners = cv2.goodFeaturesToTrack(        image=gray_roi,        maxCorners=max_corners,        qualityLevel=quality_level,        minDistance=min_distance,        mask=zigzag_mask # Appliquer le masque ici    )    if corners is None:        print("  - Aucun coin détecté avec les paramètres actuels.")        return []    # 3. Convertir les coordonnées en entiers et en tuples (x, y)    # corners est retourné comme [[[x, y]], [[x, y]], ...]    corner_coords = [tuple(map(int, c.ravel())) for c in corners]    # Trier par coordonnée X    corner_coords.sort(key=lambda pt: pt[0])    print(f"  - Nombre de coins Shi-Tomasi détectés : {len(corner_coords)}")    return corner_coords# --- Point d'entrée (CORRIGÉ V2 - arguments restaurés, Shi-Tomasi Strict) ---if __name__ == "__main__":    print("--- Test d'analyse d'image (Détection Coins ZigZag - Shi-Tomasi Strict) ---")    test_image_relative_path = '2025-03-26/setup_20250326083927/original.png'    if test_image_relative_path == 'VOTRE_IMAGE_ICI.png':         print("\n!!! ATTENTION : Veuillez modifier la variable 'test_image_relative_path' !!!\n")    else:        # 1. Isoler le ROI du PRIX - Arguments Restaurés        price_image_roi, price_y_coords = analyze_price_zone_fixed_percent(            test_image_relative_path, start_percent=0.06, end_percent=0.59        )        if price_image_roi is not None:            print(f"ROI PRIX (Fixe) extrait avec succès.")            # 2. Extraire le masque ZigZag            zigzag_mask = extract_zigzag_by_color(price_image_roi)            if zigzag_mask is not None:                print("Masque ZigZag extrait avec succès.")                # 3. Trouver les coins avec Shi-Tomasi - Paramètres Stricts                zigzag_corners = find_zigzag_corners_shi_tomasi(                    price_roi_image=price_image_roi,                    zigzag_mask=zigzag_mask,                    max_corners=20,         # Réduit max_corners                    quality_level=0.1,      # Augmenté                    min_distance=25         # Augmenté                )                if zigzag_corners:                    print("Coins ZigZag (Shi-Tomasi Strict) trouvés.")                    # 4. Visualiser les coins sur le ROI du PRIX                    price_roi_with_corners = price_image_roi.copy()                    for x, y in zigzag_corners:                        cv2.circle(price_roi_with_corners, (x, y), radius=5, color=(255, 255, 0), thickness=2) # Cyan                    output_corners_path = os.path.join(AKOBEN_CLEAN_DIR, "output_zigzag_corners_shi_tomasi.png")                    try:                        cv2.imwrite(output_corners_path, price_roi_with_corners)                        print(f"  - Image ROI PRIX avec coins Shi-Tomasi (cyan) sauvegardée : {output_corners_path}")                    except Exception as e:                        print(f"  - ERREUR lors de la sauvegarde de l'image avec coins : {e}")                else:                    print("Aucun coin ZigZag significatif (Shi-Tomasi Strict) n'a été trouvé avec les paramètres actuels.")            else:                print("Échec de l'extraction du masque ZigZag (nécessaire pour Shi-Tomasi).")        else:            print("Échec de l'extraction du ROI PRIX.")    # --- Code pour RSI (toujours désactivé pour ce test) ---    # ...    print("--- Fin du test ---")